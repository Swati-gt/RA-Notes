{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fnil\fcharset0 Consolas;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red38\green38\blue38;\red14\green110\blue109;
\red109\green109\blue109;\red251\green0\blue255;}
\margl1440\margr1440\vieww28600\viewh7760\viewkind0
\deftab720
\pard\pardeftab720\sl308

\f0\fs22 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 CREATE\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 TABLE\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 StuffType\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\pard\pardeftab720\sl308
\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 (\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\'a0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 TypeID\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 INT\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 NOT\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 NULL,\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\'a0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 TypeName\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 VARCHAR\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 (\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 10\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 )\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 NOT\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 NULL,\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\'a0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 CONSTRAINT\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 pk_StuffType\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 PRIMARY\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 KEY \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 (\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 TypeID\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 )\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 );\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\pard\pardeftab720\sl308
\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 GO\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\'a0\
\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 CREATE\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 TABLE\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 OurStuff\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\pard\pardeftab720\sl308
\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 (\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\'a0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 StuffID\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 INT\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 NOT\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 NULL\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 PRIMARY\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 KEY\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 ,\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\'a0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 StuffName\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 VARCHAR\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 (\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 10\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 )\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 NOT\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 NULL,\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\'a0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 OurTypeID\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 INT\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 NULL\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\'a0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 CONSTRAINT\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 fk_StuffType\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 FOREIGN\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 KEY \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 (\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 OurTypeID\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 )\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\'a0\'a0\'a0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 REFERENCES\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 StuffType\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 (\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 TypeID\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 )\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\'a0\'a0\'a0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ON\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 DELETE\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 CASCADE\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\'a0\'a0\'a0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ON\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 UPDATE\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 CASCADE\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 );\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\pard\pardeftab720\sl308
\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 GO\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
Stored routine\
SQL statements resueable and callable logic - functions and procedures\
Proecudre is a subprogram that performs an action and provides reusability, modularity and maintainability.\
Both has a block of SQL statement.\
\
Stored fun must return a scalar value\
Proc doesn\'92t have to\
Functions - no result set(name, lane with multiple rows), transactional commits and call backs.\
Stored functions are called with Select while procedure are called with call.\
Func - simple numerical functions, string manipulations etc.\
\
Ad.\
recompiled executed - they are ta the server.\
reduced client/server traffic\
reuse the code \
Enhanced security control - may include that\
\

\b STORED PROCEDURE per database - performs an action\

\b0 SQL statements\
Variable definition\
Conditional statements\
Loops Handlers\
BEGIN and END required.\
\
use mysql;\
show tables;\
describe db;\
show grants;\
ALTER/CREATE Routine  privileges are stored in \'91mysql.user\'92 (global permission) and \'91mysql.db\'92 t (per database permission) tables \

\b CALL db_name.routine_name(); - routine is asociated with a database\
Stored routine implicitly execute \'91use db_name\'92 this means that \'91USE db_ name\'92 is not permissible within defined routine;\
used for commonly executed queries;\
SHOW PROECDURE STATUS;\
SELECT * from proc; displays all procedures\
\
Questions: if multiple records are returned?\
Example:
\b0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 DROP database mybd;\
create database mydb;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \

\b 1.
\b0 \
file name is procedure_school.sql\
\
CREATE PROCEDURE procedure_name (IN | OUT | INOUT varibale_name TYPE) - variable scalar\
DELIMITER $$ - something other than convention (;)\
BEGIN\
\
CREATE TABLE school_table (\
	school_id NOT NULL,\
	school_name VARCHAR(45) NOT NULL,\
	PRIMARY KEY (school_id)\
	);\
\
END $$\
\
CREATE PROCEDURE drop_school_table()\
\
BEGIN\
DROP TABLE school_table;\
END $$\
\
DELIMITER;\
\
run sql file is : SOURCE person_data.sql - going to run sql command in the .sql file\
creates person table with 5 records.\
\

\b Source procedure_school.sql
\b0 \
\
DELIMITER $$\
CREATE PROCEDURE count_people()\
BEGIN\
SELECT COUNT(person_id) FROM person;\
END $$\
DELIMITER ;\
\
CALL count_people; or CALL count_people(); - result same\
\
SHOW CREATE PROCEDURE count_people\\G - shows the content of procedure.\
SHOW PROCEDURE STATUS LIKE \'91%school% \\G\
\
show tables; 
\b OR show tables ?(without ;) - it is fine
\b0 \
CALL create_school_table();\
CALL drop_school_table();\
\
\
2. IN (default), OUT, INOUT \
\

\b IN\

\b0 \
DELIMITER $$\
\
CREATE PROCEDURE get_person(IN p_id 
\b SMALLINT
\b0 )\
BEGIN\
	SELECT * FROM person\
	WHERE person_id = p_id;\
END $$\
\
CREATE PROCEDURE get_person2(IN p_id SMALLINT, IN age INT)\
BEGIN\
	SELECT * FROM person\
	WHERE person_id > p_id AND age > 10;\
END $$\
\
DELIMITER ;\
\

\b OUT\

\b0 \
DELIMITER $$\
\
CREATE PROCEDURE get_person_name(IN p_id SMALLINT, OUT f_name VARCHAR(45))\
\
BEGIN\
	SELECT f
\b irst_name INTO f_name
\b0  FROM person\
	WHERE person_id = p_id;\
END	$$\
DELIMITER ;\
\
CALL get_person_name(3, @myname);\
SELECT @myname; -display value\
@ - used for defining a variable;\
I
\b NOUT\
\

\b0 DELIMITER $$\
\
CREATE PROCEDURE compute_squre(INOUT number INT)\
BEGIN\
SELECT number * number INTO number;\
END $$\
\

\b SET @var = 7;
\b0 \
CALL compute_square(@var);\
SELECT @var;\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\b STORED FUNCTIONS (always IN parameter)  - competes a value - needs atleast one IN) - quick way f gaining access to scalar value
\b0 \
\
CREATE FUNCTION function_name(IN function_parameters ) RETURNS type\
RETURN function_operations\
\
Built-in function\
function_parameters - parameter_name and parameter type\

\b select current_user(); logged in as\
select database(); logged in database\

\b0 \
\
DELIMITER $$\
\
CREATE FUNCTION compute_square(number INT)\

\b RETURNS INT\

\b0 BEGIN\
	RETURN number*number;\
END $$\
\
CREATE FUNCTION compute_circle(radius INT)\

\b RETURNS FLOAT\

\b0 BEGIN\
	RETURN PI() * radius*radius;\
END $$\
\
DELIMITER;\
\
SELECT compute_function(3);\
SELECT compute_circle(3);\
\
\

\b EXAMPLE:
\b0 \
DELIMITER $$\
CREATE FUNCTION sf_hello_whatever (arg1 char(10)) RETURNS char(20)\
BEGIN\
RETURN CONCAT(\'91hello\'92,arg1);\
END $$\
DELIMITER ;\
\
SHOW FUNCTIONS status;\
\
SELECT sf_hello_whatever(\'91 world\'92);\
\
\

\b Create functions that will return the employee\'92s age in years and days
\b0 \
\
DELIMITER $$\
\
CREATE FUNCTION function_name sf_ age_in_years(d DATE) \
RETURNS INT\
BEGIN\
\
RETURN DATEDIFF(now(), d) / 366 ;\
\
END $$\
DELIMITER ;\
\
SELECT * from employees;\
\
SELECT DATEDIFF(\'9220160307\'92,\'921975-08-20\'92); returns number of days.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 SELECT DATEDIFF(\'9220160307\'92,\'921975-08-20\'92)/366 ; returns a number say 30.4372\
SELECT DATEDIFF(now(),\'921975-08-20\'92)/366 ; returns a number say 30.4372\
\
\
show function status;\
SELECT sf_age_in_years(\'921975/08/20\'92);\
\
DROP FUNCTION sf_age_in_years;\
CREATE FUNCTION function_name sf_ age_in_years(d DATE, days_in_year INT) \
RETURNS INT\
BEGIN\
\
RETURN DATEDIFF(now(), d) / days_in_year ;\
\
END $$\
DELIMITER ;\
\
SELECT sf_age_in_years(\'921975/08/20\'92,\'92365\'92);\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 DROP FUNCTION sf_age_in_years;\
CREATE FUNCTION function_name sf_ age_in_years(d DATE, days_in_year INT) \
RETURNS DECIMAL(6,3) (6 total numbers, 3 precision)\
BEGIN\
\
RETURN DATEDIFF(now(), d) / days_in_year ;\
\
END $$\
DELIMITER ;\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
CASE Statement:\
\
SELECT *,\
\
CASE counter WHEN 1 THEN \'91one\'92 WHEN 5 THEN \'91five ELSE \'92Too high\'92 END AS result\
\
FROM table1;\
\
\
SELECT \
	product.id, \
	product_price.currency AS currency, \
	product_price.price AS price,\
	product_price.currency AS foreigncurrency, \
	product_price.price AS foreginprice\
	\
	IF (forgeinPrice.currency IS NULL, product_price.product_id,foreginPrice.curerncy) AS currency\
FROM product\
\
LEFT JOIN product_price ON (product.id = product_price.id)\
LEFT JOIN product_price AS foreignPrice ON (product.id = product_price.id && foreignPrice.currency = \'91EUR)\
\
WHERE product.id  = \'911\'92 \'92;\
\
GROUP BY product.id\
\
\
}